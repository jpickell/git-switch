#!/usr/bin/perl
#--------------------------------------#
# git-switch
# 
# https://github.com/jpickell/git-switch
# https://gitlab.com/jpickell/git-switch
#
#--------------------------------------#

#
# Repositories are configured below
# username:repository URL
# This should be moved into its own config file

undef @ARGV;
$c=1; 
$home=$ENV{"HOME"};
$edit=$ENV{"EDITOR"};
$found=0;
chomp($git=`which git`);
if ( ! -e $git){
    print("Unable to find the git binary.  Make sure that it is installed and available in your PATH\n\n");
    exit;
}

if(-e "$home/.git-switch"){
	@repos=`cat $home/.git-switch`;
}else{
	print("$home/.git-switch not found\n\nPlease create the file with one entry per line:\n<user>:<git url>\n\n");
	exit;
}

sub help(){
print<<JKP;

Usage

-Create a file called ".git-switch" in your home directory containing the user names and urls of the providers you want to switch between with the following format:

<username>:<gitlab.com>
<username>:<github.com>
<username>:<git.mycompany.com>

-Move the git-switch script somewhere in your path so that its easily accessible

cp git-switch /usr/local/bin

-Change the permissions on git-switch so that its executable

chmod +x /usr/local/bin/git-switch

-Run the script from within an existing git controlled directory (if you run it from an uninitialized directory, you will get prompted to initialize it and choose the remote provider)

Note

In order to preserve history between providers, you may find it useful to force the first update after switching, otherwise you may end up with a whole slew of merge conflicts! and by "preserve" I mean "Overwrite" Eww. Ugh. Yes, very bad. Be sure you understand what this does before using it!

i.e. "git push -f"

Use with extreme caution!

JKP
}

sub set_remote(){
 print("$git remote set-url origin git\@$rnew:$ruser/$project\n");
 system("$git remote set-url origin git\@$rnew:$ruser/$project");
 dstamp;
}

sub all(){
    #print("This function has not yet been implemented.\n\n");
    $c=0;
    # loop through the providers
    foreach $r (@repos){
	chomp $r;
        ($ruser,$rnew)=split(/:/, $repos[$c]);
        set_remote;
	print ("git push\n");
	$c++;
    }
    # Set the repo back to original origin.
    ($ruser,$rnew)=split(/:/, $repos[0]);
    set_remote;
}


sub dstamp(){
   chomp($dt=`date`);
   $dline="Last Updated: $dt\n";
   if(-e "README.md"){
       @file=`cat README.md`;
    }else{
	@file="";
    }
   open(FILE, ">README.md")||die "Can't write to README.md, $!\n"; 
   foreach $f(@file){
	if ($f =~ /^Last Updated/){
		$f=$dline;
		$found=1;
	   }
	   print FILE $f;
	}
	if ($found == 0){ print FILE $dline; };
   close FILE;
}

sub menu(){
   foreach $r(@repos){
	chomp $r;
	($user,$rc)=split(/:/,$r);
	print ("[$c] $rc");

	if($rc eq $remote){
		print(" *\n");
	}else{
		print("\n");
	}
	$c++;
   }

 print("\n[a] Deploy to all listed remotes\n");
 print("[h] Help\n");
 print("[e] Edit config\n");
 print("[x] Exit\n");
 print ("\nChoose new repository: ");
 chomp($ans=<>);
if ($ans =~ m/[a-zA-Z]/){
 SWITCH: for ($ans) {
	/a|A/   && do { all; };
	/x|X/	&& do { print("No changes made. Exiting...\n"); };
      	/e|E/ 	&& do { 
			if($edit eq ""){
				print("Please set a default editor for your environment first.\n\n");
				}else{
				system("$edit $home/.git-switch");
				}
			};
	/h|H/	&& do { help;};
        exit; 
 }
 }

 $ans=$ans-1;

 ($ruser,$rnew)=split(/:/, $repos[$ans]);
 return $ruser,$rnew;
}

sub current(){
 @repo=split(/[\@:\/+]/, `$git config --get remote.origin.url`);

 if ($repo[0] == "git"){
	$remote  = $repo[1];
	$user    = $repo[2];
	$project = $repo[3];
 }

 if ($repo[0] =~  m/http/){
	$remote  = $repo[3];
	$user    = $repo[4];
	$project = $repo[5];
 }
 return $project;
}


if ( ! -d ".git"){
	@PWD=split(/\//,$ENV{"PWD"});
	$project=pop @PWD;	
	print("This directory has not been initialized.  Initialize? (y|n) ");
	chomp($ANS=<>);
	if($ANS eq "y"){
		print("$git init\n");
		system("$git init");
		menu;
		print("$git remote add origin git\@$rnew:$ruser/$project.git\n");
		system("$git remote add origin git\@$rnew:$ruser/$project.git\n");
		dstamp;
		exit;
	   }else{
        	exit;
	   }
	}else{
	current;
	menu;
	set_remote;
}
